{"version":3,"file":"component---src-templates-tags-tsx-b825ae84af2e3f7d2649.js","mappings":"gLAqFA,UA5EaA,IAAqC,YAApC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAU,EAC3C,MAAMC,GAAqB,QAAT,EAAAF,EAAKG,YAAI,OAAc,QAAd,EAATC,EAAWC,oBAAY,WAAd,EAATC,EAAyBC,QAAK,SAE1C,IAAEC,GAAQT,GACV,MAAEU,GAAUT,EAAKU,kBACjBC,EAAQF,EAEd,OACEG,EAAAA,cAACC,EAAAA,EAAM,CAACZ,SAAUA,EAAUM,MAAOL,GACjCU,EAAAA,cAACE,EAAAA,EAAG,CAACP,MAAK,QAAUC,EAAG,MAEvBI,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,oEAAmE,QAAK,GAAIP,EAAM,KAChGI,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,yEACZJ,EAAMK,KAAIC,IAAc,IAAb,KAAEC,GAAM,EAClB,MAAMC,EAAOD,EACPX,EAAQY,EAAKC,YAAYb,OAASY,EAAKE,OAAOC,KAC9CC,EAAQJ,EAAKC,YAAYI,cAC3BL,EAAKC,YAAYI,cAAcC,gBAAgBC,gBAC/C,GACJ,OACEd,EAAAA,cAACe,EAAAA,KAAI,CAACC,IAAKT,EAAKE,OAAOC,KAAMO,GAAIV,EAAKE,OAAOC,KAAMQ,SAAS,OAC1DlB,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,uIACZQ,EACCX,EAAAA,cAACmB,EAAAA,EAAW,CACVC,MAAOT,EACPU,IAAKd,EAAKC,YAAYb,MAAQ,oBAC9BQ,UAAU,wBAGZ,GAEFH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,qBAAqBmB,WAAS,EAACC,SAAS,6BACrDvB,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,8BAA8BR,GAE5CK,EAAAA,cAAAA,IAAAA,CACEG,UAAU,6CACVqB,wBAAyB,CACvBC,OAAQlB,EAAKC,YAAYkB,aAAenB,EAAKoB,WAIjD3B,EAAAA,cAAAA,QAAAA,KAAQO,EAAKC,YAAYoB,QAGxB,KAIb5B,EAAAA,cAACe,EAAAA,KAAI,CAACE,GAAG,SAAQ,YACV,C","sources":["webpack://nikz-dev-blog/./src/templates/tags.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\n// Components\nimport { Link, graphql } from 'gatsby';\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site?.siteMetadata?.title || `Title`;\n\n  const { tag } = pageContext;\n  const { edges } = data.allMarkdownRemark;\n  const posts = edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={`Tag '${tag}'`} />\n\n      <h1 className=\"text-3xl lg:text-5xl md:text-5xl mb-4 font-bold tracking-tighter\">Tag \"{`${tag}`}\"</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 place-content-stretch mb-8 mt-8\">\n        {posts.map(({ node }) => {\n          const post = node;\n          const title = post.frontmatter.title || post.fields.slug;\n          const Image = post.frontmatter.featuredImage\n            ? post.frontmatter.featuredImage.childImageSharp.gatsbyImageData\n            : '';\n          return (\n            <Link key={post.fields.slug} to={post.fields.slug} itemProp=\"url\">\n              <div className=\"rounded-lg bg-white dark:bg-neutral-900 shadow-md hover:shadow-lg dark:shadow-neutral-700/50 hover:dark:shadow-orange-500/50 h-full\">\n                {Image ? (\n                  <GatsbyImage\n                    image={Image}\n                    alt={post.frontmatter.title + ' - Featured image'}\n                    className=\"rounded-t-lg w-full\"\n                  />\n                ) : (\n                  ''\n                )}\n                <div className=\"post-list-item p-4\" itemScope itemType=\"http://schema.org/Article\">\n                  <h2 className=\"m-0 mb-1 text-xl font-bold\">{title}</h2>\n\n                  <p\n                    className=\"text-sm text-slate-600 dark:text-slate-200\"\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                  />\n\n                  <small>{post.frontmatter.date}</small>\n                </div>\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  );\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }),\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query AllTags($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { draft: { ne: true }, tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            featuredImage {\n              childImageSharp {\n                gatsbyImageData(width: 360, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF], quality: 90)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","pageContext","data","location","siteTitle","site","_data$site","siteMetadata","_data$site$siteMetada","title","tag","edges","allMarkdownRemark","posts","React","Layout","Seo","className","map","_ref2","node","post","frontmatter","fields","slug","Image","featuredImage","childImageSharp","gatsbyImageData","Link","key","to","itemProp","GatsbyImage","image","alt","itemScope","itemType","dangerouslySetInnerHTML","__html","description","excerpt","date"],"sourceRoot":""}